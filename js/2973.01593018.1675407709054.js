"use strict";(self["webpackChunkpolkaswap_exchange_web"]=self["webpackChunkpolkaswap_exchange_web"]||[]).push([[2973],{62973:function(e,t,s){s.r(t),s.d(t,{default:function(){return A}});var i=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("s-form",{directives:[{name:"loading",rawName:"v-loading",value:e.parentLoading,expression:"parentLoading"}],staticClass:"container el-form--actions",attrs:{"show-message":!1}},[s("generic-page-header",{staticClass:"page-header--swap",attrs:{title:e.t("adar.send."+(e.isSend?e.PageNames.Send:e.PageNames.Swap))}},[e.assetsAreEqual?e._e():s("status-action-badge",{scopedSlots:e._u([{key:"label",fn:function(){return[e._v(e._s(e.t("marketText"))+":")]},proxy:!0},{key:"value",fn:function(){return[e._v(e._s(e.swapMarketAlgorithm))]},proxy:!0},{key:"action",fn:function(){return[s("s-button",{staticClass:"el-button--settings",attrs:{type:"action",icon:"basic-settings-24",disabled:!e.marketAlgorithmsAvailable},on:{click:e.openSettingsDialog}})]},proxy:!0}],null,!1,3231945651)})],1),s("token-input",{attrs:{"is-select-available":"",balance:e.getTokenBalance(e.tokenFrom),"is-max-available":e.isMaxSwapAvailable,title:e.t("transfers.from"),token:e.tokenFrom,value:e.fromValue},on:{input:e.handleInputFieldFrom,focus:function(t){return e.handleFocusField(!1)},max:e.handleMaxValue,select:function(t){return e.openSelectTokenDialog(!0)}},scopedSlots:e._u([e.areTokensSelected&&!e.isZeroToAmount&&e.isExchangeB?{key:"title-append",fn:function(){return[s("span",{staticClass:"input-title--uppercase input-title--primary"},[e._v(" ("+e._s(e.t("swap.estimated"))+") ")])]},proxy:!0}:null],null,!0)}),s("s-button",{staticClass:"el-button--switch-tokens",attrs:{type:"action",icon:"arrows-swap-90-24",disabled:!e.areTokensSelected||e.assetsAreEqual},on:{click:e.handleSwitchTokens}}),s("token-input",{attrs:{"is-select-available":"",balance:e.getTokenBalance(e.tokenTo),title:e.t("transfers.to"),token:e.tokenTo,value:e.toValue},on:{input:e.handleInputFieldTo,focus:function(t){return e.handleFocusField(!0)},select:function(t){return e.openSelectTokenDialog(!1)}},scopedSlots:e._u([!e.areTokensSelected||e.isZeroFromAmount||e.isExchangeB?null:{key:"title-append",fn:function(){return[s("span",{staticClass:"input-title--uppercase input-title--primary"},[e._v(" ("+e._s(e.t("swap.estimated"))+") ")])]},proxy:!0},e.tokenTo?{key:"fiat-amount-append",fn:function(){return[s("value-status-wrapper",{staticClass:"price-difference__value",attrs:{value:e.fiatDifference}},[e._v(" ("),s("formatted-amount",{attrs:{value:e.fiatDifferenceFormatted}},[e._v("%")]),e._v(") ")],1)]},proxy:!0}:null],null,!0)}),e.isSend?s("s-input",{staticClass:"address-input",attrs:{maxlength:128,placeholder:e.t("walletSend.address"),"border-radius":"mini"},model:{value:e.address,callback:function(t){e.address=t},expression:"address"}}):e._e(),e.isSend&&e.assetsAreEqual?e._e():s("slippage-tolerance",{staticClass:"slippage-tolerance-settings"}),e.isLoggedIn?s("s-button",{staticClass:"action-button s-typography-button--large",attrs:{type:"primary",disabled:e.isConfirmSwapDisabled},on:{click:e.handleConfirm}},[e.areTokensSelected?e.isAvailable?e.areZeroAmounts?[e._v(" "+e._s(e.t("buttons.enterAmount"))+" ")]:e.isInsufficientLiquidity?[e._v(" "+e._s(e.t("swap.insufficientLiquidity"))+" ")]:e.isInsufficientBalance?[e._v(" "+e._s(e.t("exchange.insufficientBalance",{tokenSymbol:e.tokenFrom.symbol}))+" ")]:e.isInsufficientXorForFee?[e._v(" "+e._s(e.t("exchange.insufficientBalance",{tokenSymbol:e.KnownSymbols.XOR}))+" ")]:e.isSend&&e.emptyAddress?[e._v(" "+e._s(e.t("walletSend.enterAddress"))+" ")]:e.isSend&&!e.validAddress?[e._v(" "+e._s(e.t("walletSend.badAddress"))+" ")]:e.isSwapAndSend?[e._v(" "+e._s(e.t("adar.send.exchangeAndSend"))+" ")]:e.assetsAreEqual?[e._v(" "+e._s(e.t("walletSend.title"))+" ")]:[e._v(" "+e._s(e.t("adar.send.exchange"))+" ")]:[e._v(" "+e._s(e.t("swap.pairIsNotCreated"))+" ")]:[e._v(" "+e._s(e.t("buttons.chooseTokens"))+" ")]],2):s("s-button",{staticClass:"action-button s-typography-button--large",attrs:{type:"primary"},on:{click:e.handleConnectWallet}},[e._v(" "+e._s(e.t("swap.connectWallet"))+" ")]),e.areTokensSelected&&!e.hasZeroAmount&&e.validAddress?s("swap-transaction-details",{staticClass:"info-line-container",attrs:{"info-only":!1,operation:e.operation}}):e._e(),s("select-token",{attrs:{visible:e.showSelectTokenDialog,connected:e.isLoggedIn,asset:e.excludedAsset},on:{"update:visible":function(t){e.showSelectTokenDialog=t},select:e.selectToken}}),s("swap-confirm",{attrs:{visible:e.showConfirmSwapDialog,isInsufficientBalance:e.isInsufficientBalance,"value-to":e.valueToDisplayed,from:e.account.address,to:e.address,"is-swap-and-send":e.isSwapAndSend},on:{"update:visible":function(t){e.showConfirmSwapDialog=t},confirm:e.confirmSwap}}),s("confirm-send",{attrs:{visible:e.showConfirmSendDialog,isInsufficientBalance:e.isInsufficientBalance,from:e.account.address,to:e.address},on:{"update:visible":function(t){e.showConfirmSendDialog=t},confirm:e.confirmSend}}),s("settings-dialog",{attrs:{visible:e.showSettings},on:{"update:visible":function(t){e.showSettings=t}}})],1)},o=[],a=s(60760),n=s(70655),r=s(53545),d=s(37365),l=s(36930),u=s(82753),c=s(74614),h=s(32806),p=s(85530),m=s(80710),S=s(16546),g=s(31840),b=s(25108);let k=class extends((0,r.Wr)(d.tA.FormattedAmountMixin,h.Z,d.tA.LoadingMixin)){constructor(...e){super(...e),(0,a.Z)(this,"PageNames",S.sn),(0,a.Z)(this,"address",""),(0,a.Z)(this,"showConfirmSendDialog",!1),(0,a.Z)(this,"account",void 0),(0,a.Z)(this,"minMaxReceived",void 0),(0,a.Z)(this,"dexQuoteData",void 0),(0,a.Z)(this,"isExchangeB",void 0),(0,a.Z)(this,"fromValue",void 0),(0,a.Z)(this,"toValue",void 0),(0,a.Z)(this,"setEnabledAssets",void 0),(0,a.Z)(this,"setFromValue",void 0),(0,a.Z)(this,"setToValue",void 0),(0,a.Z)(this,"setAmountWithoutImpact",void 0),(0,a.Z)(this,"setExchangeB",void 0),(0,a.Z)(this,"setLiquidityProviderFee",void 0),(0,a.Z)(this,"setRewards",void 0),(0,a.Z)(this,"isLoggedIn",void 0),(0,a.Z)(this,"nodeIsConnected",void 0),(0,a.Z)(this,"tokenXOR",void 0),(0,a.Z)(this,"liquiditySource",void 0),(0,a.Z)(this,"tokenFrom",void 0),(0,a.Z)(this,"tokenTo",void 0),(0,a.Z)(this,"isAvailable",void 0),(0,a.Z)(this,"marketAlgorithmsAvailable",void 0),(0,a.Z)(this,"swapMarketAlgorithm",void 0),(0,a.Z)(this,"networkFees",void 0),(0,a.Z)(this,"setTokenFromAddress",void 0),(0,a.Z)(this,"setTokenToAddress",void 0),(0,a.Z)(this,"reset",void 0),(0,a.Z)(this,"setSubscriptionPayload",void 0),(0,a.Z)(this,"resetSubscriptions",void 0),(0,a.Z)(this,"updateSubscriptions",void 0),(0,a.Z)(this,"selectDexId",void 0),(0,a.Z)(this,"enabledAssets",void 0),(0,a.Z)(this,"updateBalanceSubscriptions",void 0),(0,a.Z)(this,"delimiters",l.FPNumber.DELIMITERS_CONFIG),(0,a.Z)(this,"KnownSymbols",u.KnownSymbols),(0,a.Z)(this,"isTokenFromSelected",!1),(0,a.Z)(this,"showSettings",!1),(0,a.Z)(this,"showSelectTokenDialog",!1),(0,a.Z)(this,"showConfirmSwapDialog",!1),(0,a.Z)(this,"liquidityReservesSubscription",null),(0,a.Z)(this,"enabledAssetsSubscription",null),(0,a.Z)(this,"recountSwapValues",(0,p._1)(this.runRecountSwapValues,100))}updateView(e){this.cleanSwapReservesSubscription(),this.resetAddress(),this.reset(),this.tokenFrom||this.setTokenFromAddress(u.XOR.address),this.assetsAreEqual&&!e&&this.setTokenToAddress(),this.subscribeOnEnabledAssets()}get emptyAddress(){return!this.address.trim()}get validAddress(){return!this.isSend||!this.emptyAddress&&d.hi.validateAddress(this.address)&&this.account.address!==this.address}get isSend(){return this.$route.name===S.sn.Send}get isSwapAndSend(){return this.isSend&&this.areTokensSelected&&!this.assetsAreEqual&&!this.emptyAddress}get assetsAreEqual(){return this.areTokensSelected&&this.tokenFrom?.address===this.tokenTo?.address}get valueToDisplayed(){return this.isSend&&!this.assetsAreEqual&&!this.isExchangeB&&this.tokenTo&&this.toValue?this.getStringFromCodec(this.minMaxReceived,this.tokenTo.decimals):this.assetsAreEqual?this.fromValue:this.toValue}get excludedAsset(){if(!this.isSend)return this.isTokenFromSelected?this.tokenTo:this.tokenFrom}get operation(){return this.isSend?this.assetsAreEqual?l.Operation.Transfer:l.Operation.SwapAndSend:l.Operation.Swap}resetAddress(){this.address=""}confirmSend(e){e&&(this.resetFieldFrom(),this.resetAddress())}handleConfirm(){!this.isSend||this.isSwapAndSend?this.showConfirmSwapDialog=!0:this.showConfirmSendDialog=!0}handleLiquiditySourceChange(){this.subscribeOnSwapReserves()}handleLoggedInStateChange(e,t){!t&&e&&this.recountSwapValues()}updateConnectionSubsriptions(e){e?(this.updateSubscriptions(),this.subscribeOnEnabledAssets(),this.subscribeOnSwapReserves()):(this.resetSubscriptions(),this.cleanEnabledAssetsSubscription(),this.cleanSwapReservesSubscription())}get areTokensSelected(){return!(!this.tokenFrom||!this.tokenTo)}get isZeroFromAmount(){return(0,p.yA)(this.fromValue)}get isZeroToAmount(){return(0,p.yA)(this.toValue)}get hasZeroAmount(){return this.isZeroFromAmount||this.isZeroToAmount}get areZeroAmounts(){return this.isZeroFromAmount&&this.isZeroToAmount}get fromFiatAmount(){return this.tokenFrom&&this.fromValue&&this.getFiatAmountByString(this.fromValue,this.tokenFrom)||"0"}get toFiatAmount(){return this.tokenTo&&this.toValue&&this.getFiatAmountByString(this.toValue,this.tokenTo)||"0"}get fiatDifference(){const e=new RegExp(`\\${l.FPNumber.DELIMITERS_CONFIG.thousand}`,"g"),t=new RegExp(`\\${l.FPNumber.DELIMITERS_CONFIG.decimal}`,"g"),s=s=>s.replace(e,"").replace(t,"."),i=s(this.fromFiatAmount),o=s(this.toFiatAmount);if((0,p.yA)(i)||(0,p.yA)(o))return"0";const a=new l.FPNumber(i),n=new l.FPNumber(o),r=n.sub(a).div(a).mul(this.Hundred).toFixed(2);return r}get fiatDifferenceFormatted(){return this.formatStringValue(this.fiatDifference)}get isXorOutputSwap(){return this.tokenTo?.address===u.XOR.address}get isMaxSwapAvailable(){return!(!this.tokenFrom||!this.tokenTo)&&(this.isLoggedIn&&(0,p.oI)(this.areTokensSelected,this.tokenFrom,this.fromValue,this.networkFee,this.tokenXOR,!1,this.isXorOutputSwap))}get preparedForSwap(){return this.isLoggedIn&&this.areTokensSelected}get isInsufficientLiquidity(){return!this.assetsAreEqual&&this.isAvailable&&this.preparedForSwap&&!this.areZeroAmounts&&this.hasZeroAmount}get isInsufficientBalance(){return!!this.tokenFrom&&(this.preparedForSwap&&(0,p.Vl)(this.tokenFrom,this.fromValue,this.networkFee))}get isInsufficientXorForFee(){const e=this.preparedForSwap&&(0,p.LG)(this.tokenXOR,this.networkFee,this.isXorOutputSwap);if(e||!this.isXorOutputSwap)return e;const t=this.getFPNumberFromCodec(this.tokenXOR.balance.transferable,this.tokenXOR.decimals),s=this.getFPNumberFromCodec(this.networkFee,this.tokenXOR.decimals).sub(t),i=this.getFPNumber(this.valueToDisplayed,this.tokenXOR.decimals).sub(l.FPNumber.gt(s,this.Zero)?s:this.Zero);return l.FPNumber.lte(i,this.Zero)}get tokenFromPrice(){return this.tokenFrom?this.getAssetFiatPrice(this.tokenFrom):null}get tokenToPrice(){return this.tokenTo?this.getAssetFiatPrice(this.tokenTo):null}get networkFee(){return this.networkFees[this.operation]}get isConfirmSwapDisabled(){return!this.areTokensSelected||!this.isAvailable||!this.validAddress||this.areZeroAmounts||this.isInsufficientLiquidity||this.isInsufficientBalance||this.isInsufficientXorForFee}created(){this.withApi((async()=>{this.tokenFrom||await this.setTokenFromAddress(u.XOR.address),this.assetsAreEqual&&!this.isSend&&await this.setTokenToAddress(),this.enableSwapSubscriptions()}))}enableSwapSubscriptions(){this.updateBalanceSubscriptions(),this.subscribeOnEnabledAssets()}getTokenBalance(e){return(0,p.rh)(e)}formatBalance(e){return(0,p.SL)(e)}resetFieldFrom(){this.setFromValue("")}resetFieldTo(){this.setToValue("")}handleInputFieldFrom(e,t=!0){this.areTokensSelected&&!(0,p.yA)(e)||this.resetFieldTo(),e!==this.fromValue&&(this.setFromValue(e),t&&this.recountSwapValues())}handleInputFieldTo(e,t=!0){this.areTokensSelected&&!(0,p.yA)(e)||this.resetFieldFrom(),e!==this.toValue&&(this.setToValue(e),t&&this.recountSwapValues())}runRecountSwapValues(){const e=this.isExchangeB?this.toValue:this.fromValue;if(!this.areTokensSelected||(0,p.yA)(e))return;const t=this.isExchangeB?this.setFromValue:this.setToValue,s=this.isExchangeB?this.resetFieldFrom:this.resetFieldTo,i=this.isExchangeB?this.tokenFrom:this.tokenTo,o=d.hi.dex.dexList;try{const s=o.reduce(((t,{dexId:s})=>{const i=d.hi.swap.getResult(this.tokenFrom,this.tokenTo,e,this.isExchangeB,[this.liquiditySource].filter(Boolean),this.dexQuoteData[s].paths,this.dexQuoteData[s].payload,s);return{...t,[s]:i}}),{});let a=g.DexId.XOR;for(const e in s){const t=l.FPNumber.fromCodecValue(s[e].amount),i=l.FPNumber.fromCodecValue(s[a].amount);t.isZero()||(l.FPNumber.isLessThan(t,i)&&this.isExchangeB||l.FPNumber.isLessThan(i,t)&&!this.isExchangeB)&&(a=+e)}const{amount:n,amountWithoutImpact:r,fee:u,rewards:c}=s[a];t(this.getStringFromCodec(n,i.decimals)),this.setAmountWithoutImpact(r),this.setLiquidityProviderFee(u),this.setRewards(c),this.selectDexId(a)}catch(a){b.error(a),s()}}cleanEnabledAssetsSubscription(){this.enabledAssetsSubscription&&(this.enabledAssetsSubscription.unsubscribe(),this.enabledAssetsSubscription=null)}subscribeOnEnabledAssets(){this.cleanEnabledAssetsSubscription(),this.enabledAssetsSubscription=d.hi.swap.subscribeOnPrimaryMarketsEnabledAssets().subscribe((e=>{this.setEnabledAssets(e),this.subscribeOnSwapReserves()}))}cleanSwapReservesSubscription(){this.liquidityReservesSubscription&&(this.liquidityReservesSubscription.unsubscribe(),this.liquidityReservesSubscription=null)}subscribeOnSwapReserves(){this.cleanSwapReservesSubscription(),this.areTokensSelected&&(this.liquidityReservesSubscription=d.hi.swap.subscribeOnAllDexesReserves(this.tokenFrom.address,this.tokenTo.address,this.enabledAssets,this.liquiditySource).subscribe((e=>{e.forEach((e=>this.setSubscriptionPayload(e))),this.runRecountSwapValues()})))}handleFocusField(e=!1){const t=e?this.isZeroToAmount:this.isZeroFromAmount,s=this.isExchangeB;e&&this.setToValue(this.valueToDisplayed),this.setExchangeB(e),t&&(this.resetFieldFrom(),this.resetFieldTo()),s!==this.isExchangeB&&this.recountSwapValues()}async handleSwitchTokens(){if(!this.tokenFrom||!this.tokenTo)return;const[e,t]=[this.tokenFrom.address,this.tokenTo.address];await this.setTokenFromAddress(t),await this.setTokenToAddress(e),this.isExchangeB?(this.setExchangeB(!1),this.handleInputFieldFrom(this.toValue)):(this.setExchangeB(!0),this.handleInputFieldTo(this.fromValue)),this.subscribeOnSwapReserves()}handleMaxValue(){if(!this.tokenFrom)return;this.setExchangeB(!1);const e=(0,p.MN)(this.tokenFrom,this.networkFee);this.handleInputFieldFrom(e)}handleConnectWallet(){m.ZP.push({name:S.sn.Wallet})}openSelectTokenDialog(e){this.isTokenFromSelected=e,this.showSelectTokenDialog=!0}async selectToken(e){e&&(this.isTokenFromSelected?await this.setTokenFromAddress(e.address):await this.setTokenToAddress(e.address),this.subscribeOnSwapReserves())}async confirmSwap(e){e&&(this.resetFieldFrom(),this.resetFieldTo(),this.resetAddress(),await this.setExchangeB(!1))}openSettingsDialog(){this.showSettings=!0}beforeDestroy(){this.cleanEnabledAssetsSubscription(),this.cleanSwapReservesSubscription()}destroyed(){this.reset()}};(0,n.__decorate)([c.Yn.wallet.account.account],k.prototype,"account",void 0),(0,n.__decorate)([c.Yn.swap.minMaxReceived],k.prototype,"minMaxReceived",void 0),(0,n.__decorate)([(0,r.RL)("isSend")],k.prototype,"updateView",null),(0,n.__decorate)([c.SB.swap.dexQuoteData],k.prototype,"dexQuoteData",void 0),(0,n.__decorate)([c.SB.swap.isExchangeB],k.prototype,"isExchangeB",void 0),(0,n.__decorate)([c.SB.swap.fromValue],k.prototype,"fromValue",void 0),(0,n.__decorate)([c.SB.swap.toValue],k.prototype,"toValue",void 0),(0,n.__decorate)([c.QF.swap.setPrimaryMarketsEnabledAssets],k.prototype,"setEnabledAssets",void 0),(0,n.__decorate)([c.QF.swap.setFromValue],k.prototype,"setFromValue",void 0),(0,n.__decorate)([c.QF.swap.setToValue],k.prototype,"setToValue",void 0),(0,n.__decorate)([c.QF.swap.setAmountWithoutImpact],k.prototype,"setAmountWithoutImpact",void 0),(0,n.__decorate)([c.QF.swap.setExchangeB],k.prototype,"setExchangeB",void 0),(0,n.__decorate)([c.QF.swap.setLiquidityProviderFee],k.prototype,"setLiquidityProviderFee",void 0),(0,n.__decorate)([c.QF.swap.setRewards],k.prototype,"setRewards",void 0),(0,n.__decorate)([c.Yn.wallet.account.isLoggedIn],k.prototype,"isLoggedIn",void 0),(0,n.__decorate)([c.Yn.settings.nodeIsConnected],k.prototype,"nodeIsConnected",void 0),(0,n.__decorate)([c.Yn.assets.xor],k.prototype,"tokenXOR",void 0),(0,n.__decorate)([c.Yn.swap.swapLiquiditySource],k.prototype,"liquiditySource",void 0),(0,n.__decorate)([c.Yn.swap.tokenFrom],k.prototype,"tokenFrom",void 0),(0,n.__decorate)([c.Yn.swap.tokenTo],k.prototype,"tokenTo",void 0),(0,n.__decorate)([c.Yn.swap.isAvailable],k.prototype,"isAvailable",void 0),(0,n.__decorate)([c.Yn.swap.marketAlgorithmsAvailable],k.prototype,"marketAlgorithmsAvailable",void 0),(0,n.__decorate)([c.Yn.swap.swapMarketAlgorithm],k.prototype,"swapMarketAlgorithm",void 0),(0,n.__decorate)([c.SB.wallet.settings.networkFees],k.prototype,"networkFees",void 0),(0,n.__decorate)([c.aD.swap.setTokenFromAddress],k.prototype,"setTokenFromAddress",void 0),(0,n.__decorate)([c.aD.swap.setTokenToAddress],k.prototype,"setTokenToAddress",void 0),(0,n.__decorate)([c.aD.swap.reset],k.prototype,"reset",void 0),(0,n.__decorate)([c.aD.swap.setSubscriptionPayload],k.prototype,"setSubscriptionPayload",void 0),(0,n.__decorate)([c.aD.swap.resetSubscriptions],k.prototype,"resetSubscriptions",void 0),(0,n.__decorate)([c.aD.swap.updateSubscriptions],k.prototype,"updateSubscriptions",void 0),(0,n.__decorate)([c.QF.swap.selectDexId],k.prototype,"selectDexId",void 0),(0,n.__decorate)([c.SB.swap.enabledAssets],k.prototype,"enabledAssets",void 0),(0,n.__decorate)([c.aD.swap.updateSubscriptions],k.prototype,"updateBalanceSubscriptions",void 0),(0,n.__decorate)([(0,r.RL)("liquiditySource")],k.prototype,"handleLiquiditySourceChange",null),(0,n.__decorate)([(0,r.RL)("isLoggedIn")],k.prototype,"handleLoggedInStateChange",null),(0,n.__decorate)([(0,r.RL)("nodeIsConnected")],k.prototype,"updateConnectionSubsriptions",null),k=(0,n.__decorate)([(0,r.wA)({components:{GenericPageHeader:(0,m.kF)(S.z8.GenericPageHeader),SettingsDialog:(0,m.kF)(S.z8.SettingsDialog),SlippageTolerance:(0,m.kF)(S.z8.SlippageTolerance),TokenLogo:d.wx.TokenLogo,SelectToken:(0,m.kF)(S.z8.SelectToken),SwapConfirm:(0,m.kF)(S.z8.SwapConfirm),ConfirmSend:(0,m.kF)(S.z8.ConfirmSend),StatusActionBadge:(0,m.kF)(S.z8.StatusActionBadge),TokenSelectButton:(0,m.kF)(S.z8.TokenSelectButton),TokenAddress:d.wx.TokenAddress,ValueStatusWrapper:(0,m.kF)(S.z8.ValueStatusWrapper),SwapTransactionDetails:(0,m.kF)(S.z8.SwapTransactionDetails),FormattedAmount:d.wx.FormattedAmount,FormattedAmountWithFiatValue:d.wx.FormattedAmountWithFiatValue}})],k);var w=k,F=w,v=s(1001),f=(0,v.Z)(F,i,o,!1,null,"0c5d2ac8",null),A=f.exports}}]);